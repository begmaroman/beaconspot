// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package beaconspotproto

import (
	context "context"
	health "github.com/begmaroman/beaconspot/proto/health"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BeaconSpotServiceClient is the client API for BeaconSpotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeaconSpotServiceClient interface {
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*health.HealthResponse, error)
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DomainData returns domain data by the given request
	DomainData(ctx context.Context, in *DomainDataRequest, opts ...grpc.CallOption) (*DomainDataResponse, error)
	// GetAttestation returns attestation data by the given request parameters.
	GetAttestation(ctx context.Context, in *GetAttestationRequest, opts ...grpc.CallOption) (*GetAttestationResponse, error)
	// ProposeAttestation submits the given signed attestation to the beacon nodes.
	// This endpoint submits attestation to all nodes and waits for response from all of them.
	ProposeAttestation(ctx context.Context, in *ProposeAttestationRequest, opts ...grpc.CallOption) (*ProposeAttestationResponse, error)
	// GetAggregateSelectionProof returns aggregation data by the given params.
	GetAggregateSelectionProof(ctx context.Context, in *GetAggregateSelectionProofRequest, opts ...grpc.CallOption) (*GetAggregateSelectionProofResponse, error)
	// SubmitSignedAggregateSelectionProof submits signed aggregation data to the beacon nodes.
	// This endpoint submits aggregation to all nodes and waits for response from all of them.
	SubmitSignedAggregateSelectionProof(ctx context.Context, in *SubmitSignedAggregateSelectionProofRequest, opts ...grpc.CallOption) (*SubmitSignedAggregateSelectionProofResponse, error)
	// GetBlock returns a block by the given request.
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	// ProposeBlock proposes the given signed block to beacon nodes.
	// This endpoint submits signed block to all nodes and waits for response from all of them.
	ProposeBlock(ctx context.Context, in *ProposeBlockRequest, opts ...grpc.CallOption) (*ProposeBlockResponse, error)
	// SubnetsSubscribe sends a request to nodes to subscribe on the given subnets.
	SubnetsSubscribe(ctx context.Context, in *SubnetsSubscribeRequest, opts ...grpc.CallOption) (*SubnetsSubscribeResponse, error)
	// StreamDuties opens duties streaming from the beacon nodes.
	StreamDuties(ctx context.Context, in *StreamDutiesRequest, opts ...grpc.CallOption) (BeaconSpotService_StreamDutiesClient, error)
}

type beaconSpotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBeaconSpotServiceClient(cc grpc.ClientConnInterface) BeaconSpotServiceClient {
	return &beaconSpotServiceClient{cc}
}

func (c *beaconSpotServiceClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*health.HealthResponse, error) {
	out := new(health.HealthResponse)
	err := c.cc.Invoke(ctx, "/beaconspotproto.BeaconSpotService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconSpotServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/beaconspotproto.BeaconSpotService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconSpotServiceClient) DomainData(ctx context.Context, in *DomainDataRequest, opts ...grpc.CallOption) (*DomainDataResponse, error) {
	out := new(DomainDataResponse)
	err := c.cc.Invoke(ctx, "/beaconspotproto.BeaconSpotService/DomainData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconSpotServiceClient) GetAttestation(ctx context.Context, in *GetAttestationRequest, opts ...grpc.CallOption) (*GetAttestationResponse, error) {
	out := new(GetAttestationResponse)
	err := c.cc.Invoke(ctx, "/beaconspotproto.BeaconSpotService/GetAttestation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconSpotServiceClient) ProposeAttestation(ctx context.Context, in *ProposeAttestationRequest, opts ...grpc.CallOption) (*ProposeAttestationResponse, error) {
	out := new(ProposeAttestationResponse)
	err := c.cc.Invoke(ctx, "/beaconspotproto.BeaconSpotService/ProposeAttestation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconSpotServiceClient) GetAggregateSelectionProof(ctx context.Context, in *GetAggregateSelectionProofRequest, opts ...grpc.CallOption) (*GetAggregateSelectionProofResponse, error) {
	out := new(GetAggregateSelectionProofResponse)
	err := c.cc.Invoke(ctx, "/beaconspotproto.BeaconSpotService/GetAggregateSelectionProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconSpotServiceClient) SubmitSignedAggregateSelectionProof(ctx context.Context, in *SubmitSignedAggregateSelectionProofRequest, opts ...grpc.CallOption) (*SubmitSignedAggregateSelectionProofResponse, error) {
	out := new(SubmitSignedAggregateSelectionProofResponse)
	err := c.cc.Invoke(ctx, "/beaconspotproto.BeaconSpotService/SubmitSignedAggregateSelectionProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconSpotServiceClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, "/beaconspotproto.BeaconSpotService/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconSpotServiceClient) ProposeBlock(ctx context.Context, in *ProposeBlockRequest, opts ...grpc.CallOption) (*ProposeBlockResponse, error) {
	out := new(ProposeBlockResponse)
	err := c.cc.Invoke(ctx, "/beaconspotproto.BeaconSpotService/ProposeBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconSpotServiceClient) SubnetsSubscribe(ctx context.Context, in *SubnetsSubscribeRequest, opts ...grpc.CallOption) (*SubnetsSubscribeResponse, error) {
	out := new(SubnetsSubscribeResponse)
	err := c.cc.Invoke(ctx, "/beaconspotproto.BeaconSpotService/SubnetsSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconSpotServiceClient) StreamDuties(ctx context.Context, in *StreamDutiesRequest, opts ...grpc.CallOption) (BeaconSpotService_StreamDutiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BeaconSpotService_serviceDesc.Streams[0], "/beaconspotproto.BeaconSpotService/StreamDuties", opts...)
	if err != nil {
		return nil, err
	}
	x := &beaconSpotServiceStreamDutiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BeaconSpotService_StreamDutiesClient interface {
	Recv() (*StreamDutiesResponse, error)
	grpc.ClientStream
}

type beaconSpotServiceStreamDutiesClient struct {
	grpc.ClientStream
}

func (x *beaconSpotServiceStreamDutiesClient) Recv() (*StreamDutiesResponse, error) {
	m := new(StreamDutiesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BeaconSpotServiceServer is the server API for BeaconSpotService service.
// All implementations must embed UnimplementedBeaconSpotServiceServer
// for forward compatibility
type BeaconSpotServiceServer interface {
	Health(context.Context, *emptypb.Empty) (*health.HealthResponse, error)
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// DomainData returns domain data by the given request
	DomainData(context.Context, *DomainDataRequest) (*DomainDataResponse, error)
	// GetAttestation returns attestation data by the given request parameters.
	GetAttestation(context.Context, *GetAttestationRequest) (*GetAttestationResponse, error)
	// ProposeAttestation submits the given signed attestation to the beacon nodes.
	// This endpoint submits attestation to all nodes and waits for response from all of them.
	ProposeAttestation(context.Context, *ProposeAttestationRequest) (*ProposeAttestationResponse, error)
	// GetAggregateSelectionProof returns aggregation data by the given params.
	GetAggregateSelectionProof(context.Context, *GetAggregateSelectionProofRequest) (*GetAggregateSelectionProofResponse, error)
	// SubmitSignedAggregateSelectionProof submits signed aggregation data to the beacon nodes.
	// This endpoint submits aggregation to all nodes and waits for response from all of them.
	SubmitSignedAggregateSelectionProof(context.Context, *SubmitSignedAggregateSelectionProofRequest) (*SubmitSignedAggregateSelectionProofResponse, error)
	// GetBlock returns a block by the given request.
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	// ProposeBlock proposes the given signed block to beacon nodes.
	// This endpoint submits signed block to all nodes and waits for response from all of them.
	ProposeBlock(context.Context, *ProposeBlockRequest) (*ProposeBlockResponse, error)
	// SubnetsSubscribe sends a request to nodes to subscribe on the given subnets.
	SubnetsSubscribe(context.Context, *SubnetsSubscribeRequest) (*SubnetsSubscribeResponse, error)
	// StreamDuties opens duties streaming from the beacon nodes.
	StreamDuties(*StreamDutiesRequest, BeaconSpotService_StreamDutiesServer) error
	mustEmbedUnimplementedBeaconSpotServiceServer()
}

// UnimplementedBeaconSpotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBeaconSpotServiceServer struct {
}

func (UnimplementedBeaconSpotServiceServer) Health(context.Context, *emptypb.Empty) (*health.HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedBeaconSpotServiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBeaconSpotServiceServer) DomainData(context.Context, *DomainDataRequest) (*DomainDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainData not implemented")
}
func (UnimplementedBeaconSpotServiceServer) GetAttestation(context.Context, *GetAttestationRequest) (*GetAttestationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttestation not implemented")
}
func (UnimplementedBeaconSpotServiceServer) ProposeAttestation(context.Context, *ProposeAttestationRequest) (*ProposeAttestationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeAttestation not implemented")
}
func (UnimplementedBeaconSpotServiceServer) GetAggregateSelectionProof(context.Context, *GetAggregateSelectionProofRequest) (*GetAggregateSelectionProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregateSelectionProof not implemented")
}
func (UnimplementedBeaconSpotServiceServer) SubmitSignedAggregateSelectionProof(context.Context, *SubmitSignedAggregateSelectionProofRequest) (*SubmitSignedAggregateSelectionProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSignedAggregateSelectionProof not implemented")
}
func (UnimplementedBeaconSpotServiceServer) GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedBeaconSpotServiceServer) ProposeBlock(context.Context, *ProposeBlockRequest) (*ProposeBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeBlock not implemented")
}
func (UnimplementedBeaconSpotServiceServer) SubnetsSubscribe(context.Context, *SubnetsSubscribeRequest) (*SubnetsSubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubnetsSubscribe not implemented")
}
func (UnimplementedBeaconSpotServiceServer) StreamDuties(*StreamDutiesRequest, BeaconSpotService_StreamDutiesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDuties not implemented")
}
func (UnimplementedBeaconSpotServiceServer) mustEmbedUnimplementedBeaconSpotServiceServer() {}

// UnsafeBeaconSpotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeaconSpotServiceServer will
// result in compilation errors.
type UnsafeBeaconSpotServiceServer interface {
	mustEmbedUnimplementedBeaconSpotServiceServer()
}

func RegisterBeaconSpotServiceServer(s grpc.ServiceRegistrar, srv BeaconSpotServiceServer) {
	s.RegisterService(&_BeaconSpotService_serviceDesc, srv)
}

func _BeaconSpotService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconSpotServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beaconspotproto.BeaconSpotService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconSpotServiceServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconSpotService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconSpotServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beaconspotproto.BeaconSpotService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconSpotServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconSpotService_DomainData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconSpotServiceServer).DomainData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beaconspotproto.BeaconSpotService/DomainData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconSpotServiceServer).DomainData(ctx, req.(*DomainDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconSpotService_GetAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttestationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconSpotServiceServer).GetAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beaconspotproto.BeaconSpotService/GetAttestation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconSpotServiceServer).GetAttestation(ctx, req.(*GetAttestationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconSpotService_ProposeAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeAttestationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconSpotServiceServer).ProposeAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beaconspotproto.BeaconSpotService/ProposeAttestation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconSpotServiceServer).ProposeAttestation(ctx, req.(*ProposeAttestationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconSpotService_GetAggregateSelectionProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAggregateSelectionProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconSpotServiceServer).GetAggregateSelectionProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beaconspotproto.BeaconSpotService/GetAggregateSelectionProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconSpotServiceServer).GetAggregateSelectionProof(ctx, req.(*GetAggregateSelectionProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconSpotService_SubmitSignedAggregateSelectionProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitSignedAggregateSelectionProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconSpotServiceServer).SubmitSignedAggregateSelectionProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beaconspotproto.BeaconSpotService/SubmitSignedAggregateSelectionProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconSpotServiceServer).SubmitSignedAggregateSelectionProof(ctx, req.(*SubmitSignedAggregateSelectionProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconSpotService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconSpotServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beaconspotproto.BeaconSpotService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconSpotServiceServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconSpotService_ProposeBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconSpotServiceServer).ProposeBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beaconspotproto.BeaconSpotService/ProposeBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconSpotServiceServer).ProposeBlock(ctx, req.(*ProposeBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconSpotService_SubnetsSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetsSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconSpotServiceServer).SubnetsSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beaconspotproto.BeaconSpotService/SubnetsSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconSpotServiceServer).SubnetsSubscribe(ctx, req.(*SubnetsSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconSpotService_StreamDuties_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDutiesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BeaconSpotServiceServer).StreamDuties(m, &beaconSpotServiceStreamDutiesServer{stream})
}

type BeaconSpotService_StreamDutiesServer interface {
	Send(*StreamDutiesResponse) error
	grpc.ServerStream
}

type beaconSpotServiceStreamDutiesServer struct {
	grpc.ServerStream
}

func (x *beaconSpotServiceStreamDutiesServer) Send(m *StreamDutiesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _BeaconSpotService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "beaconspotproto.BeaconSpotService",
	HandlerType: (*BeaconSpotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _BeaconSpotService_Health_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _BeaconSpotService_Ping_Handler,
		},
		{
			MethodName: "DomainData",
			Handler:    _BeaconSpotService_DomainData_Handler,
		},
		{
			MethodName: "GetAttestation",
			Handler:    _BeaconSpotService_GetAttestation_Handler,
		},
		{
			MethodName: "ProposeAttestation",
			Handler:    _BeaconSpotService_ProposeAttestation_Handler,
		},
		{
			MethodName: "GetAggregateSelectionProof",
			Handler:    _BeaconSpotService_GetAggregateSelectionProof_Handler,
		},
		{
			MethodName: "SubmitSignedAggregateSelectionProof",
			Handler:    _BeaconSpotService_SubmitSignedAggregateSelectionProof_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _BeaconSpotService_GetBlock_Handler,
		},
		{
			MethodName: "ProposeBlock",
			Handler:    _BeaconSpotService_ProposeBlock_Handler,
		},
		{
			MethodName: "SubnetsSubscribe",
			Handler:    _BeaconSpotService_SubnetsSubscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamDuties",
			Handler:       _BeaconSpotService_StreamDuties_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/begmaroman/beaconspot/proto/beaconspot/beaconspot.proto",
}
