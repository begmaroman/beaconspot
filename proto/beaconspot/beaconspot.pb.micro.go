// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/begmaroman/beaconspot/proto/beaconspot/beaconspot.proto

package beaconspotproto

import (
	fmt "fmt"
	health "github.com/begmaroman/beaconspot/proto/health"
	_ "github.com/begmaroman/beaconspot/proto/status"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/prysmaticlabs/ethereumapis/eth/v1alpha1"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for BeaconSpotService service

func NewBeaconSpotServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for BeaconSpotService service

type BeaconSpotService interface {
	Health(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*health.HealthResponse, error)
	Ping(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*empty.Empty, error)
	// Attester
	GetAttestation(ctx context.Context, in *GetAttestationRequest, opts ...client.CallOption) (*GetAttestationResponse, error)
	ProposeAttestation(ctx context.Context, in *ProposeAttestationRequest, opts ...client.CallOption) (*ProposeAttestationResponse, error)
}

type beaconSpotService struct {
	c    client.Client
	name string
}

func NewBeaconSpotService(name string, c client.Client) BeaconSpotService {
	return &beaconSpotService{
		c:    c,
		name: name,
	}
}

func (c *beaconSpotService) Health(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*health.HealthResponse, error) {
	req := c.c.NewRequest(c.name, "BeaconSpotService.Health", in)
	out := new(health.HealthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconSpotService) Ping(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "BeaconSpotService.Ping", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconSpotService) GetAttestation(ctx context.Context, in *GetAttestationRequest, opts ...client.CallOption) (*GetAttestationResponse, error) {
	req := c.c.NewRequest(c.name, "BeaconSpotService.GetAttestation", in)
	out := new(GetAttestationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconSpotService) ProposeAttestation(ctx context.Context, in *ProposeAttestationRequest, opts ...client.CallOption) (*ProposeAttestationResponse, error) {
	req := c.c.NewRequest(c.name, "BeaconSpotService.ProposeAttestation", in)
	out := new(ProposeAttestationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BeaconSpotService service

type BeaconSpotServiceHandler interface {
	Health(context.Context, *empty.Empty, *health.HealthResponse) error
	Ping(context.Context, *empty.Empty, *empty.Empty) error
	// Attester
	GetAttestation(context.Context, *GetAttestationRequest, *GetAttestationResponse) error
	ProposeAttestation(context.Context, *ProposeAttestationRequest, *ProposeAttestationResponse) error
}

func RegisterBeaconSpotServiceHandler(s server.Server, hdlr BeaconSpotServiceHandler, opts ...server.HandlerOption) error {
	type beaconSpotService interface {
		Health(ctx context.Context, in *empty.Empty, out *health.HealthResponse) error
		Ping(ctx context.Context, in *empty.Empty, out *empty.Empty) error
		GetAttestation(ctx context.Context, in *GetAttestationRequest, out *GetAttestationResponse) error
		ProposeAttestation(ctx context.Context, in *ProposeAttestationRequest, out *ProposeAttestationResponse) error
	}
	type BeaconSpotService struct {
		beaconSpotService
	}
	h := &beaconSpotServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BeaconSpotService{h}, opts...))
}

type beaconSpotServiceHandler struct {
	BeaconSpotServiceHandler
}

func (h *beaconSpotServiceHandler) Health(ctx context.Context, in *empty.Empty, out *health.HealthResponse) error {
	return h.BeaconSpotServiceHandler.Health(ctx, in, out)
}

func (h *beaconSpotServiceHandler) Ping(ctx context.Context, in *empty.Empty, out *empty.Empty) error {
	return h.BeaconSpotServiceHandler.Ping(ctx, in, out)
}

func (h *beaconSpotServiceHandler) GetAttestation(ctx context.Context, in *GetAttestationRequest, out *GetAttestationResponse) error {
	return h.BeaconSpotServiceHandler.GetAttestation(ctx, in, out)
}

func (h *beaconSpotServiceHandler) ProposeAttestation(ctx context.Context, in *ProposeAttestationRequest, out *ProposeAttestationResponse) error {
	return h.BeaconSpotServiceHandler.ProposeAttestation(ctx, in, out)
}
